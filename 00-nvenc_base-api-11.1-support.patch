diff --git a/src/nvenc/nvenc_base.cpp b/src/nvenc/nvenc_base.cpp
index b69d6f26..3b2a3db7 100644
--- a/src/nvenc/nvenc_base.cpp
+++ b/src/nvenc/nvenc_base.cpp
@@ -15,7 +15,7 @@
 // - NV_ENC_*_VER definitions where the value inside NVENCAPI_STRUCT_VERSION() was increased
 // - Incompatible struct changes in nvEncodeAPI.h (fields removed, semantics changed, etc.)
 // - Test both old and new drivers with all supported codecs
-#if NVENCAPI_VERSION != MAKE_NVENC_VER(12U, 0U)
+#if NVENCAPI_VERSION != MAKE_NVENC_VER(11U, 1U)
   #error Check and update NVENC code for backwards compatibility!
 #endif
 
@@ -143,11 +143,6 @@ namespace nvenc {
         init_params.encodeGUID = NV_ENC_CODEC_HEVC_GUID;
         break;
 
-      case 2:
-        // AV1
-        init_params.encodeGUID = NV_ENC_CODEC_AV1_GUID;
-        break;
-
       default:
         BOOST_LOG(error) << "NvEnc: unknown video format " << client_config.videoFormat;
         return false;
@@ -323,36 +318,6 @@ namespace nvenc {
         fill_h264_hevc_vui(format_config.hevcVUIParameters);
         break;
       }
-
-      case 2: {
-        // AV1
-        auto &format_config = enc_config.encodeCodecConfig.av1Config;
-        format_config.repeatSeqHdr = 1;
-        format_config.idrPeriod = NVENC_INFINITE_GOPLENGTH;
-        if (buffer_is_yuv444()) {
-          format_config.chromaFormatIDC = 3;
-        }
-        format_config.enableBitstreamPadding = config.insert_filler_data;
-        if (buffer_is_10bit()) {
-          format_config.inputPixelBitDepthMinus8 = 2;
-          format_config.pixelBitDepthMinus8 = 2;
-        }
-        format_config.colorPrimaries = colorspace.primaries;
-        format_config.transferCharacteristics = colorspace.tranfer_function;
-        format_config.matrixCoefficients = colorspace.matrix;
-        format_config.colorRange = colorspace.full_range;
-        format_config.chromaSamplePosition = buffer_is_yuv444() ? 0 : 1;
-        set_ref_frames(format_config.maxNumRefFramesInDPB, format_config.numFwdRefs, 8);
-        set_minqp_if_enabled(config.min_qp_av1);
-
-        if (client_config.slicesPerFrame > 1) {
-          // NVENC only supports slice counts that are powers of two, so we'll pick powers of two
-          // with bias to rows due to hopefully more similar macroblocks with a row vs a column.
-          format_config.numTileRows = std::pow(2, std::ceil(std::log2(client_config.slicesPerFrame) / 2));
-          format_config.numTileColumns = std::pow(2, std::floor(std::log2(client_config.slicesPerFrame) / 2));
-        }
-        break;
-      }
     }
 
     init_params.encodeConfig = &enc_config;
